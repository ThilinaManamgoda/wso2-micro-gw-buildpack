#!/usr/bin/env bash
    
# Copyright (c) 2019 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
#
# WSO2 Inc. licenses this file to you under the Apache License,
# Version 2.0 (the "License"); you may not use this file except
# in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

##################################################################################
# The flow of this script is as below,
# 1. Setup JDK in a temp directory for Micro-gw toolkit
# 2. Setup Micro-gw toolkit
# 3. Init a Micro-gw temp project
# 4. Copy Swagger definitions and interceptors to Micro-gw temp project
# 5. Build the Micro-gw temp project
# 6. Copy ballerina service to ${APP_DIR}
# 7. Export Micro-gw runtime path as environment variable
##################################################################################

set -euo pipefail

APP_DIR=$1
CACHE_DIR=$2
DEPS_DIR=$3
DEPS_IDX=$4


COLOR_REST="\e[0m"
COLOR_RED="\e[31m"
COLOR_GREEN="\e[32m"
COLOR_PURPLE="\e[35m"

OPEN_JDK_VERSION="8u212b04"
MICRO_GATEWAY_TOOLKIT_VERSION="3.0.2-SNAPSHOT"
WSO2_AM_GW_RUNTIME_VERSION="3.0.1"

OPEN_JDK="OpenJDK8U-jdk_x64_linux_hotspot_${OPEN_JDK_VERSION}"
MICRO_GATEWAY_TOOLKIT="wso2am-micro-gw-toolkit-${MICRO_GATEWAY_TOOLKIT_VERSION}"
WSO2_AM_GW_RUNTIME="wso2am-micro-gw-linux-${WSO2_AM_GW_RUNTIME_VERSION}"
PROJECT_NAME="cf-app"

#######################################
# Export current script directory
# Globals:
#   BUILD_PACK_DIR
# Arguments:
#   None
# Returns:
#   None
#######################################
function set_build_directory() {
    export BUILD_PACK_DIR=$(dirname $(dirname $0))
}

#######################################
# Creates a temp directory
# Globals:
#   TMP_DIR
# Arguments:
#   None
# Returns:
#   None
#######################################
function create_tmp_dir() {
    TMP_DIR=$(mktemp -d -t finalizeXXX)
}

#######################################
# Logs information in Green colour
# Globals:
#   COLOR_GREEN
#   COLOR_REST
# Arguments:
#   Info message
# Returns:
#   None
#######################################
function echo_info() {
   echo -e "${COLOR_GREEN}-----> $1${COLOR_REST}"
}

#######################################
# Logs error and exit with code 1 in
# Red colour
# Globals:
#   COLOR_RED
#   COLOR_REST
# Arguments:
#   Error message
# Returns:
#   None
#######################################
function echo_error_exit() {
   echo -e "${COLOR_RED}$1${COLOR_REST}"
   exit 1
}

#######################################
# Logs Stage in Purple colour
# Globals:
#   COLOR_PURPLE
#   COLOR_REST
# Arguments:
#   Stage message
# Returns:
#   None
#######################################
function echo_stage() {
   echo -e "${COLOR_PURPLE}----->  $1${COLOR_REST}"
}

#######################################
# Configure JDK
# Globals:
#   OPEN_JDK
#   TMP_DIR
#   BUILD_PACK_DIR
# Arguments:
#   None
# Returns:
#   None
#######################################
function setup_jdk() {
    echo_info "Setting up Adopt Open JDK: ${OPEN_JDK}"
    if ! mkdir -p ${TMP_DIR}/${OPEN_JDK}; then
        echo_error_exit  "Couldn't create the directory ${TMP_DIR}/${OPEN_JDK}"
    fi

    if ! tar -xf ${BUILD_PACK_DIR}/resources/${OPEN_JDK}.tar.gz -C ${TMP_DIR}/${OPEN_JDK} --strip 1; then
      echo_error_exit  "Couldn't extract the JDK to ${TMP_DIR}/${OPEN_JDK}"
    fi

    # set JAVA_HOME
    export JAVA_HOME="${TMP_DIR}/${OPEN_JDK}/"
}

#######################################
# Setup Micro-gateway Toolkit
# Globals:
#   TMP_DIR
#   BUILD_PACK_DIR
#   MICRO_GATEWAY_TOOLKIT
# Arguments:
#   None
# Returns:
#   None
#######################################
function setup_toolkit() {
    setup_jdk
    echo_info "Unzipping Micro gateway toolkit"
    if ! unzip -q -d ${TMP_DIR} ${BUILD_PACK_DIR}/resources/${MICRO_GATEWAY_TOOLKIT}.zip; then
       echo_error_exit "Unable to unzip Micro gateway runtime: ${BUILD_PACK_DIR}/resources/${MICRO_GATEWAY_TOOLKIT}.zip"
    fi

    # add toolkit to the path
    export PATH="$PATH:${TMP_DIR}/${MICRO_GATEWAY_TOOLKIT}/bin/"
}

#######################################
# Initialize the Micro-gateway project
# Globals:
#   PROJECT_NAME
# Arguments:
#   None
# Returns:
#   None
#######################################
function initialize_project() {
    echo_info "Initializing the project ${PROJECT_NAME}"
    if ! err=$(micro-gw init ${PROJECT_NAME} 2>&1); then
      echo_error_exit "Couldn't init the project ${PROJECT_NAME}. Error: ${err}"
    fi
}

#################################################################################
# Copy artifacts from the $APP_DIR to Toolkit and Build the Micro-gateway project
# Globals:
#   PROJECT_NAME
#   APP_DIR
#   API_DEFINITIONS
# Arguments:
#   None
# Returns:
#   None
#################################################################################
function build_project() {
    if ! find ${APP_DIR}/ -type f -exec cp "{}" $(pwd)/${PROJECT_NAME}/api_definitions/ \;; then
      echo_error_exit "Couldn't copy API definitions from ${APP_DIR}/ to $(pwd)/${PROJECT_NAME}/api_definitions/"
    fi

    if [[ -d ${APP_DIR}/interceptors ]]; then
        echo_info "Copying interceptors"
        if ! find ${APP_DIR}/interceptors/ -type f -exec cp "{}" $(pwd)/${PROJECT_NAME}/interceptors/ \;; then
         echo_error_exit "Couldn't copy interceptors from ${APP_DIR}/interceptors to $(pwd)/${PROJECT_NAME}/interceptors/"
        fi
    fi
    echo_info "Building the project ${PROJECT_NAME}"
    if ! err=$(micro-gw build ${PROJECT_NAME} 2>&1); then
      echo_error_exit "Couldn't build the project ${PROJECT_NAME}. Error: ${err}"
    fi
}

#################################################
# Copy the ballerina service to the app directory
# Globals:
#   BACKUP_DIR
#   PROJECT_NAME
#   APP_DIR
# Arguments:
#   None
# Returns:
#   None
#################################################
function configure_ballerina_service() {
    echo_info "Copying the ballerina service to the ${APP_DIR}/"
    if ! cp $(pwd)/${PROJECT_NAME}/target/${PROJECT_NAME}.balx ${APP_DIR}/; then
      echo_error_exit "Couldn't copy Ballerina service $(pwd)/${PROJECT_NAME}/target/${PROJECT_NAME}.balx to ${APP_DIR}/"
    fi
}

#######################################
# Add Micro-gateway runtime to the $PATH
# Globals:
#   APP_DIR
#   DEPS_IDX
#   WSO2_AM_GW_RUNTIME
# Arguments:
#   None
# Returns:
#   None
#######################################
function set_gateway_runtime_path() {
    echo_info "Setting up Gateway runtime path"
    if ! mkdir -p ${APP_DIR}/.profile.d; then
        echo_error_exit "Couldn't create the directory ${APP_DIR}/.profile.d"
    fi

    if ! echo "export PATH="\$PATH:/home/vcap/deps/${DEPS_IDX}/${WSO2_AM_GW_RUNTIME}/bin/"" >> "${APP_DIR}/.profile.d/env"; then
        echo_error_exit "Couldn't configureMicro-gateway runtime path"
    fi
}

function main() {
    echo_stage "Running finalize"
    set_build_directory
    create_tmp_dir
    setup_toolkit
    initialize_project
    build_project
    configure_ballerina_service
    set_gateway_runtime_path
}

main
