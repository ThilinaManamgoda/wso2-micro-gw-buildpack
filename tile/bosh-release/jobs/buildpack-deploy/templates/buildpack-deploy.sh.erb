#!/bin/bash

export PATH="/var/vcap/packages/cf_cli:$PATH"
export CF=`which cf`


script_dir=$(dirname $0)
job_dir=${script_dir}/..

function cf() {
	echo cf "$@"
	output=$($CF "$@" 2>&1)
	result="$?"
	if [ "$result" -ne "0" ]; then
		echo "$output"
		exit $result
	fi
}

function is_true() {
	equals_ignore_case "$1" "true"
}

function equals_ignore_case() {
	echo "$1" | grep -i "^$2\$" >/dev/null
}

function import_opsmgr_variables() {
	export SCHEME=https
	export ADMIN_USER=<%= Shellwords.escape properties.cf.admin_user %>
	export ADMIN_PASSWORD=<%= Shellwords.escape properties.cf.admin_password %>
	export DOMAIN=<%= Shellwords.escape properties.domain %>
	export CF_ORG=<%= Shellwords.escape properties.org %>
	export CF_SPACE=<%= Shellwords.escape properties.space %>
	export CF_TARGET=$SCHEME://api.${DOMAIN}
	export CF_SKIP_SSL=<%= Shellwords.escape properties.ssl.skip_cert_verify %>
	export APPLY_OPEN_SECURITY_GROUP=<%= Shellwords.escape properties.apply_open_security_group %>

	<% empty_dict = {} %>
	<% empty_list = [] %>

}

function prepare_cf_cli {
	export PATH="/var/vcap/packages/cf_cli/bin:$PATH"
	export CF_HOME=`pwd`/home/cf
	mkdir -p $CF_HOME
}

function authenticate() {
	$CF --version
	if is_true "$CF_SKIP_SSL"; then
		cf api ${CF_TARGET} --skip-ssl-validation
	else
		cf api ${CF_TARGET}
	fi
	cf auth ${ADMIN_USER} ${ADMIN_PASSWORD}
}

function setup_target_org() {
	if [ -z "$CF_ORG" ]; then
		CF_ORG=wso2-micro-gateway-buildpack-org
	fi
	if ! $CF org $CF_ORG >/dev/null 2>/dev/null; then
		cf create-org $CF_ORG
		ignore_failure=`$CF set-quota $CF_ORG runaway`
	fi
	cf target -o $CF_ORG
}

function setup_target_space() {
	if [ -z "$CF_SPACE" ]; then
		CF_SPACE=wso2-micro-gateway-buildpack-space
	fi
	if ! $CF space $CF_SPACE >/dev/null 2>/dev/null; then
		cf create-space $CF_SPACE
		apply_open_security_group "$APPLY_OPEN_SECURITY_GROUP"
	fi
	cf target -s $CF_SPACE
}

function add_target_org_to_admin() {

    SYSTEM_ORG_GUID=`$CF org system --guid`
    NEW_ORG_GUID=`$CF org $CF_ORG --guid`

    ADMIN_GUID=`$CF curl /v2/organizations/$SYSTEM_ORG_GUID/users | grep -A 2 "username\": \"admin" | awk '{print $2}' | grep organizations | awk -F '/' '{print $4 }' `

	$CF curl /v2/users/$ADMIN_GUID/organizations/$NEW_ORG_GUID -X PUT >/dev/null
	$CF curl /v2/users/$ADMIN_GUID/managed_organizations/$NEW_ORG_GUID -X PUT >/dev/null
}

function setup_package_path() {
	if [ -z "$PACKAGE_PATH" ]; then
		export PACKAGE_PATH=/var/vcap/packages
	fi
}

function apply_open_security_group() {
	if ! is_true "$1"; then
		return
	fi
	if ! $CF security-group all_open >/dev/null 2>/dev/null; then
		cf create-security-group all_open ${PACKAGE_PATH}/cf_cli/all_open.json
	fi
	cf bind-security-group all_open "$CF_ORG" "$CF_SPACE"
}

function push_buildpack() {
	BUILDPACK_NAME="$1"
	BUILDPACK_ORDER="$2"
	BUILDPACK_FILE="$3"
	$CF buildpacks | grep ${BUILDPACK_NAME} >/dev/null
	if [ "$?" -eq "0" ]; then
		cf update-buildpack ${BUILDPACK_NAME} -p ${BUILDPACK_FILE} --enable
	else
		cf create-buildpack ${BUILDPACK_NAME} ${BUILDPACK_FILE} ${BUILDPACK_ORDER} --enable
	fi
}

function setup_keytool() {
    export JDK_HOME="${PACKAGE_PATH}/openjdk"
    archive=`ls ${JDK_HOME}/OpenJDK*gz`
    tar -xf $archive -C ${JDK_HOME} --strip 1
    export KEYTOOL=${JDK_HOME}/jre/bin/keytool
}

function export_wso2_buildpack_env() {
   export WSO2_AM_GW_RUNTIME_VERSION="3.0.1"
   export WSO2_AM_GW_TOOLKIT_VERSION="3.0.2-SNAPSHOT"
   export MICRO_GW_RUNTIME_PATH="${PACKAGE_PATH}/micro_gateway_runtime"
   export MICRO_GW_RUNTIME_DIST="${PACKAGE_PATH}/micro_gateway_runtime/wso2am-micro-gw-linux-${WSO2_AM_GW_RUNTIME_VERSION}.zip"
   export MICRO_GW_TOOLKIT_DIST="${PACKAGE_PATH}/micro_gateway_toolkit/wso2am-micro-gw-toolkit-${WSO2_AM_GW_TOOLKIT_VERSION}.zip"
   export OPENJDK_DIST="${PACKAGE_PATH}/openjdk/OpenJDK8U-jdk_x64_linux_hotspot_8u212b04.tar.gz"
   export BUILDPACK_PATH="${PACKAGE_PATH}/buildpack_resources"
   export TRUST_STORE_PASSWORD="ballerina"
   export BUILDPACK_VERSION="v1.0.0"
}

function setup_certs() {
    export CERTS="<%= p("certs") %>"
    if [[ ! -z "${CERTS}" ]]; then
        mkdir ${script_dir}/certs
        echo ${CERTS} >> ${script_dir}/certs/all_certs
        pushd ${script_dir}/certs
            awk '
          split_after == 1 {n++;split_after=0}
          /-----END CERTIFICATE-----/ {split_after=1}
          {print > "cert" n ".pem"}' < all_certs
        popd
        rm ${script_dir}/certs/all_certs
    fi

    export JWT_CERT="<%= p("jwt_cert") %>"
    if [[ ! -z "${JWT_CERT}" ]]; then
        mkdir ${script_dir}/jwtcert
        echo ${JWT_CERT} >> ${script_dir}/jwtcert/jwtcert
    fi
}

function configure_micro_gw_runtime() {
    setup_keytool
    setup_certs
    pushd ${MICRO_GW_RUNTIME_PATH}
        unzip -q wso2am-micro-gw-linux-${WSO2_AM_GW_RUNTIME_VERSION}.zip
        rm wso2am-micro-gw-linux-${WSO2_AM_GW_RUNTIME_VERSION}.zip
    popd
    if [ ! -z "${CERTS}" -o ! -z "${JWT_CERT}" ]; then
        pushd ${MICRO_GW_RUNTIME_PATH}/wso2am-micro-gw-linux-${WSO2_AM_GW_RUNTIME_VERSION}/
            unzip -q runtime.zip -d runtime
            rm runtime.zip
        popd
        if [[ ! -z "${CERTS}" ]]; then
            for cert in "${script_dir}/certs"/*
            do
              cert_file=$(basename -- "$cert")
              cert_name="${cert_file%.*}"
              ${KEYTOOL} -import -alias ${cert_name} -keystore ${MICRO_GW_RUNTIME_PATH}/wso2am-micro-gw-linux-${WSO2_AM_GW_RUNTIME_VERSION}/runtime/bre/security/ballerinaTruststore.p12 -file ${cert} -storepass ${TRUST_STORE_PASSWORD}  -noprompt
            done
        fi

        if [[ ! -z "${JWT_CERT}" ]]; then
           # Deletes the current alias "wso2apim"
           ${KEYTOOL} -delete -noprompt -alias wso2apim  -keystore ${MICRO_GW_RUNTIME_PATH}/wso2am-micro-gw-linux-${WSO2_AM_GW_RUNTIME_VERSION}/runtime/bre/security/ballerinaTruststore.p12 -storepass ${TRUST_STORE_PASSWORD}
           # Import the new JWT validation cert
           ${KEYTOOL} -import -alias wso2apim -keystore ${MICRO_GW_RUNTIME_PATH}/wso2am-micro-gw-linux-${WSO2_AM_GW_RUNTIME_VERSION}/runtime/bre/security/ballerinaTruststore.p12 -file ${script_dir}/jwtcert/jwtcert -storepass ${TRUST_STORE_PASSWORD}  -noprompt
        fi

        pushd ${MICRO_GW_RUNTIME_PATH}/wso2am-micro-gw-linux-${WSO2_AM_GW_RUNTIME_VERSION}/runtime
            zip -q -r runtime.zip .
        popd

        mv ${MICRO_GW_RUNTIME_PATH}/wso2am-micro-gw-linux-${WSO2_AM_GW_RUNTIME_VERSION}/runtime/runtime.zip  ${MICRO_GW_RUNTIME_PATH}/wso2am-micro-gw-linux-${WSO2_AM_GW_RUNTIME_VERSION}/
        rm -rf ${MICRO_GW_RUNTIME_PATH}/wso2am-micro-gw-linux-${WSO2_AM_GW_RUNTIME_VERSION}/runtime
    fi
    cp ${job_dir}/config/micro-gw.conf ${MICRO_GW_RUNTIME_PATH}/wso2am-micro-gw-linux-${WSO2_AM_GW_RUNTIME_VERSION}/conf/

    pushd ${MICRO_GW_RUNTIME_PATH}
     zip -q -r wso2am-micro-gw-linux-${WSO2_AM_GW_RUNTIME_VERSION}.zip wso2am-micro-gw-linux-${WSO2_AM_GW_RUNTIME_VERSION}/*
    popd
}

function configure_buildpack() {
    cp ${MICRO_GW_RUNTIME_DIST} ${BUILDPACK_PATH}/resources/
    cp ${OPENJDK_DIST} ${BUILDPACK_PATH}/resources/
    cp ${MICRO_GW_TOOLKIT_DIST} ${BUILDPACK_PATH}/resources/
}

function create_buildpack() {
    pushd ${BUILDPACK_PATH}
     zip -r wso2am-micro-gw_buildpack-${BUILDPACK_VERSION}.zip bin VERSION manifest.yml resources
    popd
}

setup_package_path
export_wso2_buildpack_env
configure_micro_gw_runtime
configure_buildpack
create_buildpack
import_opsmgr_variables
prepare_cf_cli
authenticate
setup_target_org
setup_target_space
add_target_org_to_admin

export BUILDPACK_NAME=wso2_micro_gateway_buildpack
export BUILDPACK_ORDER=<%= Shellwords.escape properties.buildpack_order %>
export BUILDPACK_FILE=${BUILDPACK_PATH}/wso2am-micro-gw_buildpack-${BUILDPACK_VERSION}.zip
push_buildpack "$BUILDPACK_NAME" "$BUILDPACK_ORDER" "$BUILDPACK_FILE"



